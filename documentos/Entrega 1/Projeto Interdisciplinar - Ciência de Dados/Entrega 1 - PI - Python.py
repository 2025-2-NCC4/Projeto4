# -*- coding: utf-8 -*-
"""entrega_pi_1_v2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OU6ZGPpWXHgioJ4XqkVbCjrBpk3-aULT
"""

# Bloco 1: Imports e Configura√ß√µes
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Configura√ß√£o visual
plt.style.use("seaborn-v0_8")
sns.set_palette("pastel")
pd.set_option("display.max_columns", None)

# Bloco 2: Carregar os datasets
players = pd.read_csv("base_players.csv", sep=";")
lojas = pd.read_csv("lojas_valores.csv", sep=";")
transacoes = pd.read_csv("transacoes_cupons.csv", sep=";")
pedestres = pd.read_csv("pedestres_paulista.csv", sep=";")

# Mostrar dimens√µes
print("Players:", players.shape)
print("Lojas:", lojas.shape)
print("Transa√ß√µes:", transacoes.shape)
print("Pedestres:", pedestres.shape)

# Bloco 3: Verificar qualidade dos dados

def qualidade_dados(df, nome):
    print(f"\nDataset: {nome}")
    print("Dimens√µes:", df.shape)
    print("\nTipos de dados:")
    print(df.dtypes)
    print("\nValores ausentes:")
    print(df.isnull().sum())
    print("\nDuplicados:", df.duplicated().sum())
    print("="*60)

qualidade_dados(players, "Players")
qualidade_dados(lojas, "Lojas")
qualidade_dados(transacoes, "Transa√ß√µes")
qualidade_dados(pedestres, "Pedestres")

# Bloco 4: Tratamento b√°sico dos dados

# Remover poss√≠veis duplicados
players = players.drop_duplicates()
lojas = lojas.drop_duplicates()
transacoes = transacoes.drop_duplicates()
pedestres = pedestres.drop_duplicates()

# Remover poss√≠veis valores ausentes
players = players.dropna()
lojas = lojas.dropna()
transacoes = transacoes.dropna()
pedestres = pedestres.dropna()

# Bloco 5: Pr√©-visualiza√ß√£o
print("Players:")
display(players.head())

print("Lojas:")
display(lojas.head())

print("Transa√ß√µes:")
display(transacoes.head())

print("Pedestres:")
display(pedestres.head())

# Bloco 6: Estat√≠sticas descritivas
print("Descri√ß√£o - Players")
display(players.describe(include="all").T)

print("Descri√ß√£o - Lojas")
display(lojas.describe(include="all").T)

print("Descri√ß√£o - Transa√ß√µes")
display(transacoes.describe(include="all").T)

print("Descri√ß√£o - Pedestres")
display(pedestres.describe(include="all").T)

# Bloco 7: KPIs e an√°lises

# KPI 1: N√∫mero de clientes √∫nicos
clientes_totais = players.shape[0]

# KPI 2: N√∫mero de lojas parceiras
lojas_unicas = transacoes['nome_estabelecimento'].unique()

# KPI 3: Volume total transacionado
volume_total = lojas["valor_compra"].sum()

# KPI 4: Valor m√©dio dos cupons
valor_medio_cupom = lojas["valor_cupom"].mean()

# KPI 5: Ticket m√©dio por compra
ticket_medio = lojas["valor_compra"].mean()

# KPI 6: N√∫mero de pedestres √∫nicos
pedestres_unicos = pedestres.shape[0]


print("üìå KPIs para CEO & CFO")
print(f"Clientes √∫nicos: {clientes_totais}")
print(f"Lojas parceiras: {len(lojas_unicas)}")
print(f"Volume total transacionado: R$ {volume_total:,.2f}")
print(f"Valor m√©dio dos cupons: R$ {valor_medio_cupom:,.2f}")
print(f"Ticket m√©dio: R$ {ticket_medio:,.2f}")
print(f"Pedestres √∫nicos registrados: {pedestres_unicos}")


# Visualiza√ß√µes
fig, axs = plt.subplots(1, 2, figsize=(12,5))

# Distribui√ß√£o de valores de compra
sns.histplot(lojas["valor_compra"], bins=30, ax=axs[0], kde=True)
axs[0].set_title("Distribui√ß√£o dos Valores de Compra")

# Rela√ß√£o cupom vs compra
sns.scatterplot(data=lojas.sample(5000), x="valor_cupom", y="valor_compra", alpha=0.5, ax=axs[1])
axs[1].set_title("Cupom vs Valor da Compra")

plt.tight_layout()
plt.show()